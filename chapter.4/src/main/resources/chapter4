4.1 ReentrantLock类实现同步
    lock()方法获取锁，unlock()方法释放锁
    Condition类用于实现等待通知机制。
    condition.await()方法时会释放锁并进入等待状态
    condition.signal()方法会通知同一个condition对象中调用了await()方法的线程。
    Object类和Condition类对比。
        Object类中的wait()方法相当于Condition类中的await()方法。
        Object类中的wait(long timeout)方法相当于Condition类中的await(long time,TimeUnit unit)方法。
        Object类中的notify()方法相当于Condition类中的signal()方法。
        Object类中的notifyAll()方法相当于Condition类中的signalAll()方法。
    使用多个Condition可以在持有同一个锁的前提下对线程进行分类，并根据需要唤醒不同种类的线程。
    ReentrantLock有公平锁和非公平锁两种方式，公平锁根据先来先得的顺序获取锁，非公平锁采用抢占机制，随机获取锁。
    getHoldCount() 获取当前线程保持此锁定的的个数，也就是调用lock()方法的个数。
    getQueueLength()获取正在等待此锁定的线程数。
    getWaitQueueLength(Condition condition)获取正在等待此锁定相关给定条件Condition的线程数。（调用此condition的await()方法的线程个数）
    hasQueueThread(Thread thread)查询指定线程是否正在等待获取此锁定
    hasQueueThreads()查询是否有线程正在等待获取此锁。
    getWaiters(Condition condition)查询是否有线程正在等待此锁的有关condition条件。
    isFair()返回此锁是否为公平锁。
    